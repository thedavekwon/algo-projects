#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

const int INF = 987654321;

int n, m;
int E[19][19];
int dp[1<<19][19];

//dp[mask][i] = length of the shortest hamilton walk in the subgraph
//              generated by vertices in mask, that ends in the vertices i

int bit(int mask, int i) {
    return (mask & (1<<i));
}

int count(int mask) {
    return __builtin_popcount(mask);
}

void pprint() {
    for (int i = 0; i < (1<<n); i++) {
        for (int j = 0; j < m; ++j) {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int solve_r(int mask, int i) {
    int &ret = dp[mask][i];
    if (count(mask) == 1 && bit(mask, i)) {
        return ret = 1;
    }
    for (int j = 0; j < n; ++j) {
        if (bit(mask, j) && count(mask) > 1) {
            ret = min(ret, solve_r(mask ^ (1 << j), i)+1);
        }
    }
    return ret;
}

int main() {
    ifstream in("./input.txt");
    cin.rdbuf(in.rdbuf());

    cin >> n >> m;
    fill(&E[0][0], &E[19][19], 0);
    fill(&dp[0][0], &dp[1<<n][m], INF);
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        E[a][b] = 1;
        E[b][a] = 1;
    }
    cout << solve_r((1<<n)-1, 0) << endl;
    pprint();
}